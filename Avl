public class Avl {

    static class Node{
        int data, height;
        Node left, right;
        Node(int data){
            this.data=data;
            this.height=1;
        }
    }

    public static Node root;

    public static int height(Node root){
        if(root==null)
          return 0;
        
        return root.height;
    }

    public static int balanceFactor(Node root){
        if(root==null)
          return 0;

        return (height(root.left)-height(root.right));
    }

    public static Node leftRotate(Node x){
        Node y = x.right; 
        Node T2 = y.left; 

        // Perform rotation 
        y.left = x; 
        x.right = T2; 

        // Update heights 
        x.height = 1 + Math.max(height(x.left),
                                height(x.right)); 
        y.height = 1 + Math.max(height(y.left), 
                                height(y.right)); 

        // Return new root 
        return y; 
    }

    public static Node rightRotate(Node y){
        Node x = y.left; 
        Node T2 = x.right; 

        // Perform rotation 
        x.right = y; 
        y.left = T2; 

        // Update heights 
        y.height = 1 + Math.max(height(y.left), 
                                height(y.right)); 
        x.height = 1 + Math.max(height(x.left), 
                                height(x.right)); 

        // Return new root 
        return x; 
    }

    public static Node insert(Node root, int key){
         if(root==null)
           return new Node(key);
        
           if(root.data < key)
             root.right= insert(root.right, key);
            else if(root.data > key)
             root.left= insert(root.left, key);
            else
             return root; //duplicate values not allowed

            //  update the height of ancestor node
            root.height= Math.max(height(root.left) , height(root.right) ) +1;
            
            // calculate balance factor
            int bf=balanceFactor(root);

            // left left case ===> right rotation
           if(bf > 1 && key < root.left.data){
             return rightRotate(root);
           }

        //    right right case ===> left rotation
           if(bf < -1 && key > root.right.data){
            return leftRotate(root);
          }

        //   left right case ==> left rotation then right rotation
          if(bf > 1 && key > root.left.data){
            root.left=leftRotate(root.left);
            return rightRotate(root);
          }

        //   right left case ==> right rotation then left rotation
        if(bf < -1 && key < root.right.data){
            root.right=rightRotate(root.right);
            return leftRotate(root);
        }
         
        // return balanced AVL tree after insertion
        return root;
    }

    public static void preOrder(Node root){
        if(root!=null){
            System.out.print(root.data+" ");
            preOrder(root.left);
            preOrder(root.right);
        }
    }

    public static void main(String[] args) {
        
        root = insert(root,10);
        root= insert(root,20);
        root= insert(root,30);
        root= insert(root,40);
        root= insert(root,50);
        root= insert(root,25);
        preOrder(root);
    }
}